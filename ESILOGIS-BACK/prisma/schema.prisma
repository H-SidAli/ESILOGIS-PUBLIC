generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id                     Int                   @id @default(autoincrement()) @map("user_id")
  email                  String                @unique @db.VarChar(255)
  passwordHash           String?               @map("password_hash") @db.VarChar(255)
  googleId               String?               @unique @map("google_id") @db.VarChar(255)
  createdAt              DateTime              @default(now()) @map("created_at")
  isBlocked              Boolean               @default(false) @map("is_blocked")
  role                   Role                  @default(USER)
  updatedAt              DateTime              @default(now()) @updatedAt @map("updated_at")
  blockedAt              DateTime?
  firstName              String?               @map("first_name") @db.VarChar(255)
  lastName               String?               @map("last_name") @db.VarChar(255)
  Document               Document[]
  completedInterventions Intervention[]        @relation("CompletedBy")
  reportedInterventions  Intervention[]
  history                InterventionHistory[]
  notifications          Notification[]
  person                 Person?

  @@index([email])
  @@index([googleId])
  @@map("user_account")
}

model Department {
  id    Int      @id @default(autoincrement()) @map("department_id")
  name  String   @unique @db.VarChar(255)
  users Person[]

  @@map("department")
}

model Person {
  id                    Int                      @id @default(autoincrement()) @map("person_id")
  lastName              String                   @map("last_name") @db.VarChar(255)
  firstName             String                   @map("first_name") @db.VarChar(255)
  email                 String?                  @unique @db.VarChar(255)
  phoneNumber           String?                  @map("phone_number") @db.VarChar(20)
  userAccountId         Int?                     @unique @map("user_account_id")
  createdAt             DateTime                 @default(now()) @map("created_at")
  updatedAt             DateTime                 @default(now()) @updatedAt @map("updated_at")
  isTechnician          Boolean                  @default(false) @map("is_technician")
  departmentId          Int?                     @map("department_id")
  isRetired             Boolean?                 @default(false) @map("is_retired")
  passwordHash          String?                  @map("password_hash") @db.VarChar(255)
  retiredAt             DateTime?
  assignedInterventions InterventionAssignment[]
  history               InterventionHistory[]
  department            Department?              @relation(fields: [departmentId], references: [id])
  userAccount           UserAccount?             @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
  workSchedules         WorkSchedule[]

  @@index([email])
  @@map("person")
}

model WorkSchedule {
  id        Int      @id @default(autoincrement())
  personId  Int
  day       Weekday
  startTime DateTime @db.Time(6)
  endTime   DateTime @db.Time(6)
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, day])
  @@map("work_schedule")
}

model Equipment {
  id                       Int             @id @default(autoincrement()) @map("equipment_id")
  inventoryCode            String          @unique @map("inventory_code") @db.VarChar(50)
  pictureUrl               String?         @map("picture_url") @db.VarChar(255)
  status                   EquipmentStatus @default(IN_SERVICE)
  createdAt                DateTime        @default(now()) @map("created_at")
  updatedAt                DateTime        @updatedAt @map("updated_at")
  typeId                   Int             @map("type_id")
  acquisitionDate          DateTime?       @map("acquisition_date")
  commissionDate           DateTime?       @map("commission_date")
  locationId               Int             @map("location_id")
  nextScheduledMaintenance DateTime?       @map("next_scheduled_maintenance")
  documents                Document[]
  location                 Location        @relation(fields: [locationId], references: [id])
  type                     EquipmentType   @relation(fields: [typeId], references: [id])
  interventions            Intervention[]

  @@index([inventoryCode])
  @@index([status])
  @@map("equipment")
}

model EquipmentType {
  id        Int         @id @default(autoincrement()) @map("type_id")
  name      String      @unique @map("type_name") @db.VarChar(255)
  category  String      @db.VarChar(255)
  equipment Equipment[]

  @@map("equipment_types")
}

model Intervention {
  id                 Int                      @id @default(autoincrement()) @map("intervention_id")
  description        String
  status             InterventionStatus       @default(PENDING)
  createdAt          DateTime                 @default(now()) @map("created_at")
  resolvedAt         DateTime?                @map("resolved_at")
  equipmentId        Int?                     @map("equipment_id")
  locationId         Int                      @map("location_id")
  reportedById       Int                      @map("reported_by_user_id")
  plannedAt          DateTime?                @map("planned_at")
  approvedAt         DateTime?                @map("approved_at")
  cancelledAt        DateTime?                @map("cancelled_at")
  completedById      Int?                     @map("completed_by_user_id")
  deniedAt           DateTime?                @map("deleted_at")
  estimatedDuration  Int?                     @map("estimated_duration")
  isRecurring        Boolean                  @default(false) @map("is_recurring")
  partsUsed          String?                  @map("parts_used")
  recurrenceInterval Int?                     @map("recurrence_interval")
  resolutionSummary  String?
  startedAt          DateTime?                @map("started_at")
  type               InterventionType         @default(CORRECTIVE)
  updatedAt          DateTime?                @default(now()) @updatedAt @map("updated_at")
  priority           InterventionPriority     @default(MEDIUM)
  documents          Document[]
  completedBy        UserAccount?             @relation("CompletedBy", fields: [completedById], references: [id])
  equipment          Equipment?               @relation(fields: [equipmentId], references: [id])
  location           Location                 @relation(fields: [locationId], references: [id])
  reportedBy         UserAccount              @relation(fields: [reportedById], references: [id])
  assignees          InterventionAssignment[]
  history            InterventionHistory[]
  pauses             Pause[]

  @@index([createdAt])
  @@index([locationId])
  @@index([priority])
  @@index([reportedById])
  @@index([status])
  @@map("intervention")
}

model Pause {
  id             Int          @id @default(autoincrement())
  interventionId Int          @map("intervention_id")
  pausedAt       DateTime     @map("paused_at")
  reason         String?
  resumedAt      DateTime?    @map("resumed_at")
  intervention   Intervention @relation(fields: [interventionId], references: [id])

  @@map("pause")
}

model InterventionAssignment {
  id             Int          @id @default(autoincrement()) @map("assignment_id")
  interventionId Int          @map("intervention_id")
  personId       Int          @map("person_id")
  assignedAt     DateTime     @default(now()) @map("assigned_at")
  intervention   Intervention @relation(fields: [interventionId], references: [id])
  person         Person       @relation(fields: [personId], references: [id])

  @@unique([interventionId, personId])
  @@map("intervention_assignment")
}

model InterventionHistory {
  id             Int          @id @default(autoincrement()) @map("history_id")
  interventionId Int          @map("intervention_id")
  action         String
  partsUsed      String?      @map("parts_used")
  notes          String?
  loggedAt       DateTime     @default(now()) @map("logged_at")
  loggedById     Int?          @map("logged_by_id")
  userAccountId  Int?         @map("user_account_id")
  intervention   Intervention @relation(fields: [interventionId], references: [id])
  loggedBy       Person?     @relation(fields: [loggedById], references: [id])
  userAccount    UserAccount? @relation(fields: [userAccountId], references: [id])

  @@map("intervention_history")
}

model Notification {
  id        Int         @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean     @default(false)
  createdAt DateTime    @default(now())
  user      UserAccount @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

model Location {
  id            Int            @id @default(autoincrement()) @map("location_id")
  name          String         @unique @db.VarChar(255)
  equipment     Equipment[]
  interventions Intervention[]

  @@index([name])
  @@map("location")
}

model Document {
  id             Int           @id @default(autoincrement())
  filename       String
  originalName   String        @map("original_name")
  path           String
  mimetype       String
  size           Int
  interventionId Int?          @map("intervention_id")
  equipmentId    Int?          @map("equipment_id")
  uploadedAt     DateTime      @default(now()) @map("uploaded_at")
  uploadedById   Int           @map("uploaded_by_id")
  equipment      Equipment?    @relation(fields: [equipmentId], references: [id])
  intervention   Intervention? @relation(fields: [interventionId], references: [id])
  uploadedBy     UserAccount   @relation(fields: [uploadedById], references: [id])

  @@map("document")
}

enum Role {
  ADMIN
  TECHNICIAN
  USER
}

enum InterventionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  CANCELLED
  DENIED
  PAUSED
}

enum InterventionType {
  CORRECTIVE
  PREVENTIVE
}

enum InterventionPriority {
  LOW
  MEDIUM
  HIGH
}

enum EquipmentStatus {
  IN_SERVICE
  OUT_OF_SERVICE
  UNDER_MAINTENANCE
  RETIRED
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
